# Booleans

[true, false]

==>

Expression(Array(Boolean, Boolean))

# Numbers

[1, 2.5, 3e-5, 1_500]

==>

Expression(Array(Number, Number, Number, Number))

# Identifiers

[one, Two_Three]

==>

Expression(Array(Variable, Variable))

# Null-safe property/method access

one?.two

==>

Expression(ObjectAccess(Variable, NullSafeMemberOf, Property))

# Null-coalescing operator

one ?? "two"

==>

Expression(BinaryExpression(Variable, Operator, String))

# Ternary expression

condition ? "yes" : "no"

==>

Expression(TernaryExpression(Variable, String, String))

# Ternary expression shortcut

condition ? "yes"

==>

Expression(BinaryExpression(Variable, Operator, String))

# Ternary expression shortcut 2

condition ?: "yes"

==>

Expression(BinaryExpression(Variable, Operator, String))

# Strings

["hello", "one\"\\two", 't"h"ree']

==>

Expression(Array(String, String, String))

# Unary operator

not this

==>

Expression(UnaryExpression(UnaryOperator, Variable))

# Multi-word operators

"ab" starts with "a"

==>

Expression(BinaryExpression(String, OperatorKeyword, String))

# Binary operators

[1 + 2, true || false, "ab" contains "a"]

==>

Expression(Array(BinaryExpression(Number, Operator, Number), BinaryExpression(Boolean, Operator, Boolean), BinaryExpression(String, OperatorKeyword, String)))

# Arrays

[["a","b","c"], [[2, []]]]

==>

Expression(Array(Array(String, String, String), Array(Array(Number, Array))))

# Objects

[{a: b, "c": 5},{"c": "d"}]

==>

Expression(Array(Object(Variable, Variable, String, Number), Object(String, String)))

# Object member access after function call

getObj().prop

==>

Expression(ObjectAccess(Call(Function, Arguments), MemberOf, Property))

# Object method

foo.prop(123)

==>

Expression(Call(ObjectAccess(Variable, MemberOf, Method), Arguments(Number)))

# Object access within binary expression

is_granted(user, user.self.getGroup()) + user.self

==>

Expression(BinaryExpression(Call(Function, Arguments(Variable, Call(ObjectAccess(ObjectAccess(Variable, MemberOf, Property), MemberOf, Method), Arguments))), Operator, ObjectAccess(Variable, MemberOf, Property)))

# Keywords require breaking character

andnotfound

==>

Expression(Variable)

# Top-level comment

123 /* this is a great number */

==>

Expression(Number, BlockComment)

# Comment in arguments

function(/* this is a great number */ 123)

==>

Expression(Call(Function, Arguments(BlockComment, Number)))

# Bitwise operators introduced in Symfony 7.2

1 << 2 >> 3

==>

Expression(BinaryExpression(Number, Operator, BinaryExpression(Number, Operator, Number)))
