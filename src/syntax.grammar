@detectDelim
@external prop t from "./props"

@precedence {
  left @left,
  right @right
}

@skip { space | BlockComment }

@skip {} {
  BlockComment { "/*" (blockCommentContent | blockCommentNewline)* blockCommentEnd }
}

@local tokens {
  blockCommentEnd { "*/" }
  blockCommentNewline { "\n" }
  @else blockCommentContent
}

@top Expression { expression }

expression {
  PropertyAccess |
  ArrayAccess |
  Call |
  Number |
  String |
  Boolean |
  Null |
  Object |
  Array |
  Variable |
  TernaryExpression |
  BinaryExpression |
  UnaryExpression |
  Application
}

Application { "(" expression ")" }
Variable { word }
Function { word }
Property { word }
Method { word }

list {
  (expression ("," expression)*)?
}

Object[t="object"] {
  "{" (expression ":" expression ("," expression ":" expression)*)? "}"
}

ArrayAccess {
  expression !left "[" expression "]"
}

Array[t="array"] {
  "[" list "]"
}

UnaryExpression {
  UnaryOperator !right expression
}

BinaryExpression {
  expression !right (OperatorKeyword | Operator) expression
}

PropertyAccess {
  expression !left ( MemberOf | NullSafeMemberOf ) Property
}

MethodAccess {
  expression !left ( MemberOf | NullSafeMemberOf ) Method
}

call<callable> {
  callable Arguments
}

Arguments { "(" list ")" }

Call {
  call<Function> |
  call<MethodAccess>
}

TernaryExpression {
  expression !right o<'?'> expression ':' expression
}

@tokens {
  Number[t="number"] { (($[0-9]+('_' $[0-9]+)*('.' (![.])($[0-9]+('_' $[0-9]+)*)?)?)($[eE]$[+-]?$[0-9]+('_' $[0-9]+)*)?) }
  word { $[a-zA-Z_]+$[a-zA-Z_0-9]* }
  String[t="string"] { ( '"' (!["\\] | "\\" _)* ('"' | @eof) ) | "'" (!['\\] | "\\" _)* ("'" | @eof) }

  space { $[ \t\n\r]+ }

  Operator { '===' | '!==' |  '||' | '&&' | '==' | '!=' | '>=' | '<=' | '..' | '**' | '!' | '|' | '^' | '&' | '<<' | '>>' | '<' | '>' | '+' | '-' | '~' | '*' | '/' | '%' | '??' | '?:' | '?' }
  MemberOf { '.' }
  NullSafeMemberOf { '?.' }

  @precedence {
    String,
    NullSafeMemberOf,
    Operator,
    MemberOf,
    Number,
    word
  }
}

o<term> { @extend<Operator, term> }
k<term> { @specialize<word, term> }

Boolean[t="bool"] { k<'true'> | k<'TRUE'> | k<'false'> | k<'FALSE'> }
Null[t="null"] { k<'null'> | k<'NULL'> }

OperatorKeyword {
    (k<'starts'> k<'with'>) |
    (k<'ends'> k<'with'>) |
    k<'contains'> |
    k<'matches'> |
    (k<'not'> k<'in'>) |
    k<'not'> |
    k<'and'> |
    k<'or'> |
    k<'xor'> |
    k<'in'>
}

UnaryOperator {
    k<'not'> |
    o<'!'> |
    o<'~'> |
    o<'+'> |
    o<'-'>
}
